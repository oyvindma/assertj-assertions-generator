package my.assertions;

import java.util.Objects;
import org.assertj.assertions.generator.data.classRefTestdata.different_patckage_2.InheritingOwningClassFromDifferentPackage;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;

/**
 * {@link InheritingOwningClassFromDifferentPackage} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert extends AbstractObjectAssert<RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert, InheritingOwningClassFromDifferentPackage> {

  /**
   * Creates a new <code>{@link RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert}</code> to make assertions on actual InheritingOwningClassFromDifferentPackage.
   * @param actual the InheritingOwningClassFromDifferentPackage we want to make assertions on.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert(InheritingOwningClassFromDifferentPackage actual) {
    super(actual, RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert.class);
  }

  /**
   * An entry point for RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myInheritingOwningClassFromDifferentPackage)</code> and get specific assertion with code completion.
   * @param actual the InheritingOwningClassFromDifferentPackage we want to make assertions on.
   * @return a new <code>{@link RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert assertThat(InheritingOwningClassFromDifferentPackage actual) {
    return new RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert(actual);
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsArray_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).contains(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param classInDifferentPackageAsArray_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).containsOnly(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsArray_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).doesNotContain(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsArray_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsArray_getter but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInDifferentPackageAsArray_getter().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInDifferentPackageAsArray_getter()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning()).contains(classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning()).containsOnly(classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning()).doesNotContain(classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInDifferentPackageAsArray_getter_subclassDifferentPackageThanOwning()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter is equal to the given one.
   * @param classInDifferentPackageAsField_getter the given classInDifferentPackageAsField_getter to compare the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsField_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage classInDifferentPackageAsField_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInDifferentPackageAsField_getter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage actualClassInDifferentPackageAsField_getter = actual.getClassInDifferentPackageAsField_getter();
    if (!Objects.deepEquals(actualClassInDifferentPackageAsField_getter, classInDifferentPackageAsField_getter)) {
      failWithMessage(assertjErrorMessage, actual, classInDifferentPackageAsField_getter, actualClassInDifferentPackageAsField_getter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning is equal to the given one.
   * @param classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning the given classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning to compare the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage actualClassInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning = actual.getClassInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning();
    if (!Objects.deepEquals(actualClassInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning, classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning)) {
      failWithMessage(assertjErrorMessage, actual, classInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning, actualClassInDifferentPackageAsField_getter_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsGenericList_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsGenericList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsGenericList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsGenericList_getter_subclassDifferentPackageThanOwning());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsList_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning(), classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsList_getter_subclassDifferentPackageThanOwning());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsArray_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).contains(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   *
   * @param classInSamePackageAsArray_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).containsOnly(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsArray_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsArray_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).doesNotContain(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsArray_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsArray_getter but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInSamePackageAsArray_getter().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInSamePackageAsArray_getter()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning()).contains(classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   *
   * @param classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning()).containsOnly(classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning()).doesNotContain(classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsArray_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInSamePackageAsArray_getter_subclassDifferentPackageThanOwning()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter is equal to the given one.
   * @param classInSamePackageAsField_getter the given classInSamePackageAsField_getter to compare the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsField_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage classInSamePackageAsField_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInSamePackageAsField_getter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage actualClassInSamePackageAsField_getter = actual.getClassInSamePackageAsField_getter();
    if (!Objects.deepEquals(actualClassInSamePackageAsField_getter, classInSamePackageAsField_getter)) {
      failWithMessage(assertjErrorMessage, actual, classInSamePackageAsField_getter, actualClassInSamePackageAsField_getter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter_subclassDifferentPackageThanOwning is equal to the given one.
   * @param classInSamePackageAsField_getter_subclassDifferentPackageThanOwning the given classInSamePackageAsField_getter_subclassDifferentPackageThanOwning to compare the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter_subclassDifferentPackageThanOwning to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_getter_subclassDifferentPackageThanOwning is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsField_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage classInSamePackageAsField_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInSamePackageAsField_getter_subclassDifferentPackageThanOwning of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage actualClassInSamePackageAsField_getter_subclassDifferentPackageThanOwning = actual.getClassInSamePackageAsField_getter_subclassDifferentPackageThanOwning();
    if (!Objects.deepEquals(actualClassInSamePackageAsField_getter_subclassDifferentPackageThanOwning, classInSamePackageAsField_getter_subclassDifferentPackageThanOwning)) {
      failWithMessage(assertjErrorMessage, actual, classInSamePackageAsField_getter_subclassDifferentPackageThanOwning, actualClassInSamePackageAsField_getter_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsGenericList_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsGenericList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsGenericList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsGenericList_getter_subclassDifferentPackageThanOwning());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsIterable_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_getter(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsIterable_getter the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsIterable_getter() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsIterable_getter but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsIterable_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsIterable_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning(), classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsIterable_getter_subclassDifferentPackageThanOwning());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsArray the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray == null) failWithMessage("Expecting classInDifferentPackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray).contains(classInDifferentPackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param classInDifferentPackageAsArray the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray == null) failWithMessage("Expecting classInDifferentPackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray).containsOnly(classInDifferentPackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsArray the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray == null) failWithMessage("Expecting classInDifferentPackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray).doesNotContain(classInDifferentPackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsArray() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsArray but had :\n  <%s>";

    // check that it is not empty
    if (actual.classInDifferentPackageAsArray.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.classInDifferentPackageAsArray));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsArray_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray_subclassDifferentPackageThanOwning).contains(classInDifferentPackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param classInDifferentPackageAsArray_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray_subclassDifferentPackageThanOwning).containsOnly(classInDifferentPackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsArray_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInDifferentPackageAsArray_subclassDifferentPackageThanOwning).doesNotContain(classInDifferentPackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsArray_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsArray_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsArray_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check that it is not empty
    if (actual.classInDifferentPackageAsArray_subclassDifferentPackageThanOwning.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.classInDifferentPackageAsArray_subclassDifferentPackageThanOwning));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField is equal to the given one.
   * @param classInDifferentPackageAsField the given classInDifferentPackageAsField to compare the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsField(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage classInDifferentPackageAsField) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInDifferentPackageAsField of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage actualClassInDifferentPackageAsField = actual.classInDifferentPackageAsField;
    if (!Objects.deepEquals(actualClassInDifferentPackageAsField, classInDifferentPackageAsField)) {
      failWithMessage(assertjErrorMessage, actual, classInDifferentPackageAsField, actualClassInDifferentPackageAsField);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_subclassDifferentPackageThanOwning is equal to the given one.
   * @param classInDifferentPackageAsField_subclassDifferentPackageThanOwning the given classInDifferentPackageAsField_subclassDifferentPackageThanOwning to compare the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_subclassDifferentPackageThanOwning to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsField_subclassDifferentPackageThanOwning is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsField_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage classInDifferentPackageAsField_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInDifferentPackageAsField_subclassDifferentPackageThanOwning of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage actualClassInDifferentPackageAsField_subclassDifferentPackageThanOwning = actual.classInDifferentPackageAsField_subclassDifferentPackageThanOwning;
    if (!Objects.deepEquals(actualClassInDifferentPackageAsField_subclassDifferentPackageThanOwning, classInDifferentPackageAsField_subclassDifferentPackageThanOwning)) {
      failWithMessage(assertjErrorMessage, actual, classInDifferentPackageAsField_subclassDifferentPackageThanOwning, actualClassInDifferentPackageAsField_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList == null) failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList == null) failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList == null) failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList, classInDifferentPackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsGenericList() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList but had :\n  <%s>";

    // check
    if (actual.classInDifferentPackageAsGenericList.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInDifferentPackageAsGenericList);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning, classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInDifferentPackageAsGenericList_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList == null) failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList == null) {
      failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList == null) failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList == null) {
      failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList == null) failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList == null) {
      failWithMessage("Expecting classInDifferentPackageAsList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsList, classInDifferentPackageAsList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsList() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsList but had :\n  <%s>";

    // check
    if (actual.classInDifferentPackageAsList.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInDifferentPackageAsList);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage... classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInDifferentPackageAsList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage> classInDifferentPackageAsList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.different_package.ClassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning, classInDifferentPackageAsList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInDifferentPackageAsList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInDifferentPackageAsList_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInDifferentPackageAsList_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsList_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInDifferentPackageAsList_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsArray the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray == null) failWithMessage("Expecting classInSamePackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray).contains(classInSamePackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   *
   * @param classInSamePackageAsArray the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray == null) failWithMessage("Expecting classInSamePackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray).containsOnly(classInSamePackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsArray the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsArray(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray == null) failWithMessage("Expecting classInSamePackageAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray).doesNotContain(classInSamePackageAsArray);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsArray() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsArray but had :\n  <%s>";

    // check that it is not empty
    if (actual.classInSamePackageAsArray.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.classInSamePackageAsArray));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsArray_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray_subclassDifferentPackageThanOwning).contains(classInSamePackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   *
   * @param classInSamePackageAsArray_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray_subclassDifferentPackageThanOwning).containsOnly(classInSamePackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsArray_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsArray_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsArray_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsArray_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.classInSamePackageAsArray_subclassDifferentPackageThanOwning).doesNotContain(classInSamePackageAsArray_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsArray_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsArray_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsArray_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsArray_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check that it is not empty
    if (actual.classInSamePackageAsArray_subclassDifferentPackageThanOwning.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.classInSamePackageAsArray_subclassDifferentPackageThanOwning));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField is equal to the given one.
   * @param classInSamePackageAsField the given classInSamePackageAsField to compare the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsField(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage classInSamePackageAsField) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInSamePackageAsField of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage actualClassInSamePackageAsField = actual.classInSamePackageAsField;
    if (!Objects.deepEquals(actualClassInSamePackageAsField, classInSamePackageAsField)) {
      failWithMessage(assertjErrorMessage, actual, classInSamePackageAsField, actualClassInSamePackageAsField);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_subclassDifferentPackageThanOwning is equal to the given one.
   * @param classInSamePackageAsField_subclassDifferentPackageThanOwning the given classInSamePackageAsField_subclassDifferentPackageThanOwning to compare the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_subclassDifferentPackageThanOwning to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsField_subclassDifferentPackageThanOwning is not equal to the given one.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsField_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage classInSamePackageAsField_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInSamePackageAsField_subclassDifferentPackageThanOwning of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage actualClassInSamePackageAsField_subclassDifferentPackageThanOwning = actual.classInSamePackageAsField_subclassDifferentPackageThanOwning;
    if (!Objects.deepEquals(actualClassInSamePackageAsField_subclassDifferentPackageThanOwning, classInSamePackageAsField_subclassDifferentPackageThanOwning)) {
      failWithMessage(assertjErrorMessage, actual, classInSamePackageAsField_subclassDifferentPackageThanOwning, actualClassInSamePackageAsField_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList == null) failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList == null) failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList == null) failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList, classInSamePackageAsGenericList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsGenericList.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsGenericList() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList but had :\n  <%s>";

    // check
    if (actual.classInSamePackageAsGenericList.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInSamePackageAsGenericList);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsGenericList_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning, classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsGenericList_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsGenericList_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInSamePackageAsGenericList_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsIterable the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable == null) failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsIterable the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable == null) {
      failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsIterable the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable == null) failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsIterable the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable == null) {
      failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsIterable the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable == null) failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsIterable the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable == null) {
      failWithMessage("Expecting classInSamePackageAsIterable parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsIterable, classInSamePackageAsIterable.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsIterable.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsIterable() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsIterable but had :\n  <%s>";

    // check
    if (actual.classInSamePackageAsIterable.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInSamePackageAsIterable);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains <b>only</b> the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should be contained in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain all given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasOnlyClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   *
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage... classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning does not contain the given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsIterable_subclassDifferentPackageThanOwning the given elements that should not be in actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning contains any given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage elements.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert doesNotHaveClassInSamePackageAsIterable_subclassDifferentPackageThanOwning(java.util.Collection<? extends org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage> classInSamePackageAsIterable_subclassDifferentPackageThanOwning) {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.classRefTestdata.ClassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_subclassDifferentPackageThanOwning == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_subclassDifferentPackageThanOwning parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning, classInSamePackageAsIterable_subclassDifferentPackageThanOwning.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InheritingOwningClassFromDifferentPackage has no classInSamePackageAsIterable_subclassDifferentPackageThanOwning.
   * @return this assertion object.
   * @throws AssertionError if the actual InheritingOwningClassFromDifferentPackage's classInSamePackageAsIterable_subclassDifferentPackageThanOwning is not empty.
   */
  public RefTestdatadifferent_patckage_2InheritingOwningClassFromDifferentPackageAssert hasNoClassInSamePackageAsIterable_subclassDifferentPackageThanOwning() {
    // check that actual InheritingOwningClassFromDifferentPackage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsIterable_subclassDifferentPackageThanOwning but had :\n  <%s>";

    // check
    if (actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInSamePackageAsIterable_subclassDifferentPackageThanOwning);
    }

    // return the current assertion for method chaining
    return this;
  }


}
