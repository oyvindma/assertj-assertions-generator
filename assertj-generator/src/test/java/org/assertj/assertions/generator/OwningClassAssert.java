package org.assertj.assertions.generator;

import java.util.Objects;

import org.assertj.assertions.generator.data.typereference.KlassInSamePackage;
import org.assertj.assertions.generator.data.typereference.OwningClass;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;

/**
 * {@link OwningClass} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class OwningClassAssert extends AbstractObjectAssert<OwningClassAssert, OwningClass> {

  /**
   * Creates a new <code>{@link OwningClassAssert}</code> to make assertions on actual OwningClass.
   * @param actual the OwningClass we want to make assertions on.
   */
  public OwningClassAssert(OwningClass actual) {
    super(actual, OwningClassAssert.class);
  }

  /**
   * An entry point for OwningClassAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOwningClass)</code> and get specific assertion with code completion.
   * @param actual the OwningClass we want to make assertions on.
   * @return a new <code>{@link OwningClassAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static OwningClassAssert assertThat(OwningClass actual) {
    return new OwningClassAssert(actual);
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsArray_getter contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param classInDifferentPackageAsArray_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).contains(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsArray_getter contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param classInDifferentPackageAsArray_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsArray_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).containsOnly(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsArray_getter does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsArray_getter the given elements that should not be in actual OwningClass's classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsArray_getter contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsArray_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsArray_getter == null) failWithMessage("Expecting classInDifferentPackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInDifferentPackageAsArray_getter()).doesNotContain(classInDifferentPackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInDifferentPackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsArray_getter is not empty.
   */
  public OwningClassAssert hasNoClassInDifferentPackageAsArray_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsArray_getter but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInDifferentPackageAsArray_getter().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInDifferentPackageAsArray_getter()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsField_getter is equal to the given one.
   * @param classInDifferentPackageAsField_getter the given classInDifferentPackageAsField_getter to compare the actual OwningClass's classInDifferentPackageAsField_getter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OwningClass's classInDifferentPackageAsField_getter is not equal to the given one.
   */
  public OwningClassAssert hasClassInDifferentPackageAsField_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage classInDifferentPackageAsField_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInDifferentPackageAsField_getter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage actualClassInDifferentPackageAsField_getter = actual.getClassInDifferentPackageAsField_getter();
    if (!Objects.deepEquals(actualClassInDifferentPackageAsField_getter, classInDifferentPackageAsField_getter)) {
      failWithMessage(assertjErrorMessage, actual, classInDifferentPackageAsField_getter, actualClassInDifferentPackageAsField_getter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList_getter the given elements that should not be in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsGenericList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_getter == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_getter does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList_getter the given elements that should not be in actual OwningClass's classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsGenericList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsGenericList_getter(), classInDifferentPackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInDifferentPackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_getter is not empty.
   */
  public OwningClassAssert hasNoClassInDifferentPackageAsGenericList_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsGenericList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsGenericList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsList_getter the given elements that should be contained in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsList_getter the given elements that should not be in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsList_getter(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsList_getter == null) failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsList_getter does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsList_getter the given elements that should not be in actual OwningClass's classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsList_getter(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsList_getter == null) {
      failWithMessage("Expecting classInDifferentPackageAsList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInDifferentPackageAsList_getter(), classInDifferentPackageAsList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInDifferentPackageAsList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsList_getter is not empty.
   */
  public OwningClassAssert hasNoClassInDifferentPackageAsList_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInDifferentPackageAsList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInDifferentPackageAsList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInSamePackageAsArray_getter contains the given KlassInSamePackage elements.
   * @param classInSamePackageAsArray_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsArray_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsArray_getter(KlassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).contains(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsArray_getter contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   *
   * @param classInSamePackageAsArray_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsArray_getter does not contain all given KlassInSamePackage elements and nothing else.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsArray_getter(KlassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).containsOnly(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsArray_getter does not contain the given KlassInSamePackage elements.
   *
   * @param classInSamePackageAsArray_getter the given elements that should not be in actual OwningClass's classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsArray_getter contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsArray_getter(KlassInSamePackage... classInSamePackageAsArray_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsArray_getter == null) failWithMessage("Expecting classInSamePackageAsArray_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getClassInSamePackageAsArray_getter()).doesNotContain(classInSamePackageAsArray_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInSamePackageAsArray_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsArray_getter is not empty.
   */
  public OwningClassAssert hasNoClassInSamePackageAsArray_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsArray_getter but had :\n  <%s>";

    // check that it is not empty
    if (actual.getClassInSamePackageAsArray_getter().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getClassInSamePackageAsArray_getter()));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInSamePackageAsField_getter is equal to the given one.
   * @param classInSamePackageAsField_getter the given classInSamePackageAsField_getter to compare the actual OwningClass's classInSamePackageAsField_getter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OwningClass's classInSamePackageAsField_getter is not equal to the given one.
   */
  public OwningClassAssert hasClassInSamePackageAsField_getter(org.assertj.assertions.generator.data.typereference.KlassInSamePackage classInSamePackageAsField_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classInSamePackageAsField_getter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.typereference.KlassInSamePackage actualClassInSamePackageAsField_getter = actual.getClassInSamePackageAsField_getter();
    if (!Objects.deepEquals(actualClassInSamePackageAsField_getter, classInSamePackageAsField_getter)) {
      failWithMessage(assertjErrorMessage, actual, classInSamePackageAsField_getter, actualClassInSamePackageAsField_getter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter contains the given KlassInSamePackage elements.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsGenericList_getter(KlassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter contains the given KlassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsGenericList_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsGenericList_getter(KlassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter contains <b>only</b> the given KlassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsGenericList_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter does not contain the given KlassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList_getter the given elements that should not be in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsGenericList_getter(KlassInSamePackage... classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_getter == null) failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_getter does not contain the given KlassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList_getter the given elements that should not be in actual OwningClass's classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsGenericList_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_getter == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsGenericList_getter(), classInSamePackageAsGenericList_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInSamePackageAsGenericList_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_getter is not empty.
   */
  public OwningClassAssert hasNoClassInSamePackageAsGenericList_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList_getter but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsGenericList_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsGenericList_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter contains the given KlassInSamePackage elements.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsIterable_getter(KlassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter contains the given KlassInSamePackage elements in Collection.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsIterable_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsIterable_getter(KlassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter contains <b>only</b> the given KlassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsIterable_getter the given elements that should be contained in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsIterable_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter does not contain the given KlassInSamePackage elements.
   *
   * @param classInSamePackageAsIterable_getter the given elements that should not be in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsIterable_getter(KlassInSamePackage... classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsIterable_getter == null) failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsIterable_getter does not contain the given KlassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsIterable_getter the given elements that should not be in actual OwningClass's classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsIterable_getter(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsIterable_getter) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsIterable_getter == null) {
      failWithMessage("Expecting classInSamePackageAsIterable_getter parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getClassInSamePackageAsIterable_getter(), classInSamePackageAsIterable_getter.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInSamePackageAsIterable_getter.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsIterable_getter is not empty.
   */
  public OwningClassAssert hasNoClassInSamePackageAsIterable_getter() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsIterable_getter but had :\n  <%s>";

    // check
    if (actual.getClassInSamePackageAsIterable_getter().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getClassInSamePackageAsIterable_getter());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsGenericList_owningClass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasClassInDifferentPackageAsGenericList_owningClass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsGenericList_owningClass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyClassInDifferentPackageAsGenericList_owningClass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should not be in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsGenericList_owningClass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInDifferentPackageAsGenericList_owningClass does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   *
   * @param classInDifferentPackageAsGenericList_owningClass the given elements that should not be in actual OwningClass's classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveClassInDifferentPackageAsGenericList_owningClass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> classInDifferentPackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (classInDifferentPackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInDifferentPackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInDifferentPackageAsGenericList_owningClass, classInDifferentPackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInDifferentPackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInDifferentPackageAsGenericList_owningClass is not empty.
   */
  public OwningClassAssert hasNoClassInDifferentPackageAsGenericList_owningClass() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInDifferentPackageAsGenericList_owningClass but had :\n  <%s>";

    // check
    if (actual.classInDifferentPackageAsGenericList_owningClass.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInDifferentPackageAsGenericList_owningClass);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass contains the given KlassInSamePackage elements.
   * @param classInSamePackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsGenericList_owningClass(KlassInSamePackage... classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_owningClass == null) failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass contains the given KlassInSamePackage elements in Collection.
   * @param classInSamePackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasClassInSamePackageAsGenericList_owningClass(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsGenericList_owningClass(KlassInSamePackage... classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_owningClass == null) failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass contains <b>only</b> the given KlassInSamePackage elements in Collection and nothing else in whatever order.
   * @param classInSamePackageAsGenericList_owningClass the given elements that should be contained in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyClassInSamePackageAsGenericList_owningClass(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain the given KlassInSamePackage elements.
   *
   * @param classInSamePackageAsGenericList_owningClass the given elements that should not be in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsGenericList_owningClass(KlassInSamePackage... classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (classInSamePackageAsGenericList_owningClass == null) failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's classInSamePackageAsGenericList_owningClass does not contain the given KlassInSamePackage elements in Collection.
   *
   * @param classInSamePackageAsGenericList_owningClass the given elements that should not be in actual OwningClass's classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveClassInSamePackageAsGenericList_owningClass(java.util.Collection<? extends KlassInSamePackage> classInSamePackageAsGenericList_owningClass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (classInSamePackageAsGenericList_owningClass == null) {
      failWithMessage("Expecting classInSamePackageAsGenericList_owningClass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.classInSamePackageAsGenericList_owningClass, classInSamePackageAsGenericList_owningClass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no classInSamePackageAsGenericList_owningClass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's classInSamePackageAsGenericList_owningClass is not empty.
   */
  public OwningClassAssert hasNoClassInSamePackageAsGenericList_owningClass() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have classInSamePackageAsGenericList_owningClass but had :\n  <%s>";

    // check
    if (actual.classInSamePackageAsGenericList_owningClass.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.classInSamePackageAsGenericList_owningClass);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param klassInDifferentPackageAsArray_owningKlasses the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsArray_owningKlasses.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasKlassInDifferentPackageAsArray_owningKlasses(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsArray_owningKlasses) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsArray_owningKlasses == null) failWithMessage("Expecting klassInDifferentPackageAsArray_owningKlasses parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInDifferentPackageAsArray_owningKlasses).contains(klassInDifferentPackageAsArray_owningKlasses);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   *
   * @param klassInDifferentPackageAsArray_owningKlasses the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsArray_owningKlasses.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else.
   */
  public OwningClassAssert hasOnlyKlassInDifferentPackageAsArray_owningKlasses(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsArray_owningKlasses) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsArray_owningKlasses == null) failWithMessage("Expecting klassInDifferentPackageAsArray_owningKlasses parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInDifferentPackageAsArray_owningKlasses).containsOnly(klassInDifferentPackageAsArray_owningKlasses);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param klassInDifferentPackageAsArray_owningKlasses the given elements that should not be in actual OwningClass's klassInDifferentPackageAsArray_owningKlasses.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInDifferentPackageAsArray_owningKlasses(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsArray_owningKlasses) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsArray_owningKlasses == null) failWithMessage("Expecting klassInDifferentPackageAsArray_owningKlasses parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInDifferentPackageAsArray_owningKlasses).doesNotContain(klassInDifferentPackageAsArray_owningKlasses);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no klassInDifferentPackageAsArray_owningKlasses.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsArray_owningKlasses is not empty.
   */
  public OwningClassAssert hasNoKlassInDifferentPackageAsArray_owningKlasses() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have klassInDifferentPackageAsArray_owningKlasses but had :\n  <%s>";

    // check that it is not empty
    if (actual.klassInDifferentPackageAsArray_owningKlasses.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.klassInDifferentPackageAsArray_owningKlasses));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsField_owningKlass is equal to the given one.
   * @param klassInDifferentPackageAsField_owningKlass the given klassInDifferentPackageAsField_owningKlass to compare the actual OwningClass's klassInDifferentPackageAsField_owningKlass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OwningClass's klassInDifferentPackageAsField_owningKlass is not equal to the given one.
   */
  public OwningClassAssert hasKlassInDifferentPackageAsField_owningKlass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage klassInDifferentPackageAsField_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting klassInDifferentPackageAsField_owningKlass of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage actualKlassInDifferentPackageAsField_owningKlass = actual.klassInDifferentPackageAsField_owningKlass;
    if (!Objects.deepEquals(actualKlassInDifferentPackageAsField_owningKlass, klassInDifferentPackageAsField_owningKlass)) {
      failWithMessage(assertjErrorMessage, actual, klassInDifferentPackageAsField_owningKlass, actualKlassInDifferentPackageAsField_owningKlass);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasKlassInDifferentPackageAsList_owningKlass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasKlassInDifferentPackageAsList_owningKlass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) {
      failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements and nothing else in whatever order.
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyKlassInDifferentPackageAsList_owningKlass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains <b>only</b> the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection and nothing else in whatever order.
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should be contained in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain all given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert hasOnlyKlassInDifferentPackageAsList_owningKlass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) {
      failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   *
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should not be in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInDifferentPackageAsList_owningKlass(org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage... klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage varargs is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInDifferentPackageAsList_owningKlass does not contain the given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements in Collection.
   *
   * @param klassInDifferentPackageAsList_owningKlass the given elements that should not be in actual OwningClass's klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass contains any given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInDifferentPackageAsList_owningKlass(java.util.Collection<? extends org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage> klassInDifferentPackageAsList_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.typereference.different_package.KlassInDifferentPackage collection is not null.
    if (klassInDifferentPackageAsList_owningKlass == null) {
      failWithMessage("Expecting klassInDifferentPackageAsList_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.klassInDifferentPackageAsList_owningKlass, klassInDifferentPackageAsList_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no klassInDifferentPackageAsList_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInDifferentPackageAsList_owningKlass is not empty.
   */
  public OwningClassAssert hasNoKlassInDifferentPackageAsList_owningKlass() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have klassInDifferentPackageAsList_owningKlass but had :\n  <%s>";

    // check
    if (actual.klassInDifferentPackageAsList_owningKlass.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.klassInDifferentPackageAsList_owningKlass);
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsArray_owningKlass contains the given KlassInSamePackage elements.
   * @param klassInSamePackageAsArray_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsArray_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsArray_owningKlass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasKlassInSamePackageAsArray_owningKlass(KlassInSamePackage... klassInSamePackageAsArray_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsArray_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsArray_owningKlass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInSamePackageAsArray_owningKlass).contains(klassInSamePackageAsArray_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsArray_owningKlass contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   *
   * @param klassInSamePackageAsArray_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsArray_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsArray_owningKlass does not contain all given KlassInSamePackage elements and nothing else.
   */
  public OwningClassAssert hasOnlyKlassInSamePackageAsArray_owningKlass(KlassInSamePackage... klassInSamePackageAsArray_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsArray_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsArray_owningKlass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInSamePackageAsArray_owningKlass).containsOnly(klassInSamePackageAsArray_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsArray_owningKlass does not contain the given KlassInSamePackage elements.
   *
   * @param klassInSamePackageAsArray_owningKlass the given elements that should not be in actual OwningClass's klassInSamePackageAsArray_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsArray_owningKlass contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInSamePackageAsArray_owningKlass(KlassInSamePackage... klassInSamePackageAsArray_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsArray_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsArray_owningKlass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.klassInSamePackageAsArray_owningKlass).doesNotContain(klassInSamePackageAsArray_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no klassInSamePackageAsArray_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsArray_owningKlass is not empty.
   */
  public OwningClassAssert hasNoKlassInSamePackageAsArray_owningKlass() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have klassInSamePackageAsArray_owningKlass but had :\n  <%s>";

    // check that it is not empty
    if (actual.klassInSamePackageAsArray_owningKlass.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.klassInSamePackageAsArray_owningKlass));
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsField_owningKlass is equal to the given one.
   * @param klassInSamePackageAsField_owningKlass the given klassInSamePackageAsField_owningKlass to compare the actual OwningClass's klassInSamePackageAsField_owningKlass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OwningClass's klassInSamePackageAsField_owningKlass is not equal to the given one.
   */
  public OwningClassAssert hasKlassInSamePackageAsField_owningKlass(org.assertj.assertions.generator.data.typereference.KlassInSamePackage klassInSamePackageAsField_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting klassInSamePackageAsField_owningKlass of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.typereference.KlassInSamePackage actualKlassInSamePackageAsField_owningKlass = actual.klassInSamePackageAsField_owningKlass;
    if (!Objects.deepEquals(actualKlassInSamePackageAsField_owningKlass, klassInSamePackageAsField_owningKlass)) {
      failWithMessage(assertjErrorMessage, actual, klassInSamePackageAsField_owningKlass, actualKlassInSamePackageAsField_owningKlass);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains the given KlassInSamePackage elements.
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasKlassInSamePackageAsIterable_owningKlass(KlassInSamePackage... klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains the given KlassInSamePackage elements in Collection.
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasKlassInSamePackageAsIterable_owningKlass(java.util.Collection<? extends KlassInSamePackage> klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) {
      failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains <b>only</b> the given KlassInSamePackage elements and nothing else in whatever order.
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyKlassInSamePackageAsIterable_owningKlass(KlassInSamePackage... klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains <b>only</b> the given KlassInSamePackage elements in Collection and nothing else in whatever order.
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should be contained in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain all given KlassInSamePackage elements.
   */
  public OwningClassAssert hasOnlyKlassInSamePackageAsIterable_owningKlass(java.util.Collection<? extends KlassInSamePackage> klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) {
      failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain the given KlassInSamePackage elements.
   *
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should not be in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInSamePackageAsIterable_owningKlass(KlassInSamePackage... klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage varargs is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass's klassInSamePackageAsIterable_owningKlass does not contain the given KlassInSamePackage elements in Collection.
   *
   * @param klassInSamePackageAsIterable_owningKlass the given elements that should not be in actual OwningClass's klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass contains any given KlassInSamePackage elements.
   */
  public OwningClassAssert doesNotHaveKlassInSamePackageAsIterable_owningKlass(java.util.Collection<? extends KlassInSamePackage> klassInSamePackageAsIterable_owningKlass) {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // check that given KlassInSamePackage collection is not null.
    if (klassInSamePackageAsIterable_owningKlass == null) {
      failWithMessage("Expecting klassInSamePackageAsIterable_owningKlass parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.klassInSamePackageAsIterable_owningKlass, klassInSamePackageAsIterable_owningKlass.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OwningClass has no klassInSamePackageAsIterable_owningKlass.
   * @return this assertion object.
   * @throws AssertionError if the actual OwningClass's klassInSamePackageAsIterable_owningKlass is not empty.
   */
  public OwningClassAssert hasNoKlassInSamePackageAsIterable_owningKlass() {
    // check that actual OwningClass we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have klassInSamePackageAsIterable_owningKlass but had :\n  <%s>";

    // check
    if (actual.klassInSamePackageAsIterable_owningKlass.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.klassInSamePackageAsIterable_owningKlass);
    }

    // return the current assertion for method chaining
    return this;
  }


}
